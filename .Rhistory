lu_volcano2 <- EnhancedVolcano(res_object,
lab = res_object$hgnc_symbol,
x = 'log2FoldChange',
y = 'pvalue',
#selectLab = rownames(res_object)[which(names(keyvals) %in% c('NS','log2FoldChange','-Log10Q','low','high'))],
xlim = c(-6.5,6.5),
xlab = bquote(~Log[2]~ 'fold change'),
ylab = bquote(~-Log[10] ~ italic(P)),
title = 'yes vs no',
pCutoff = 50e-3,
FCcutoff = 0.6,
pointSize = 2.5,
labSize = 4.5,
#shape = c(6, 4, 2, 11, 15),
#colCustom = keyvals,
colAlpha = 0.75,
legendPosition = 'right',
legendLabSize = 15,
legendIconSize = 5.0,
drawConnectors = FALSE,
widthConnectors = 0.5,
colConnectors = 'grey50',
gridlines.major = TRUE,
gridlines.minor = FALSE,
border = 'partial',
borderWidth = 1.5,
borderColour = 'black')
ggsave(paste0("figures/lu/lu_volcano2_", verson_num, ".png"), width = 8, height = 8, dpi = 600)
lu_volcano2
return(res_object)
}
gene_ton_fig <- function(res_object,verson_num, ensembl)
{
anno_df <- data.frame(gene_id = res_object$ensembl, gene_name = res_object$hgnc_symbol)
vst_macrophage <- varianceStabilizingTransformation(lu_dds_trt)
bg_ids <- rownames(lu_dds_trt)[rowSums(counts(lu_dds_trt)) > 0]
bg_symbols <- mapIds(org.Hs.eg.db,
keys = bg_ids,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# res_enrich object
#library("AnnotationDbi")
de_symbols_IFNg_vs_naive <- deseqresult2df(res_object, FDR =0.05)$hgnc_symbol
# res_enrich object ------------------------------------------------------------
topgoDE_macrophage_IFNg_vs_naive <-
pcaExplorer::topGOtable(de_symbols_IFNg_vs_naive,
bg_symbols,
ontology = "BP",
mapping = "org.Hs.eg.db",
geneID = "symbol",
topTablerows = 500)
res_enrich <- shake_topGOtableResult(topgoDE_macrophage_IFNg_vs_naive)
res_enrich <- get_aggrscores(res_enrich = res_enrich,
res_de = res_object,
annotation_obj = anno_df,
aggrfun = mean)
enhance_table <- enhance_table(res_enrich,
res_object,
n_gs = 30,
annotation_obj = anno_df,
chars_limit = 60)
enhance_table
ggsave(paste0("GO/lu/lu_enhance_table_", verson_num, ".png"), width = 8, height =15, dpi = 600)
gs_alluvial(res_enrich = res_enrich,
res_de = res_object,
annotation_obj = anno_df,
n_gs = 30)
volcano_plot<- gs_volcano(res_enrich,
p_threshold = 0.05,
color_by = "aggr_score",
volcano_labels = 10,
gs_ids = NULL,
plot_title = "my volcano")
volcano_plot
ggsave(paste0("GO/lu/lu_volcano_plot_", verson_num, ".png"), width = 8, height = 4.6, dpi = 600)
mds <- gs_mds(res_enrich,
res_object,
anno_df,
n_gs = 200,
gs_ids = NULL,
similarity_measure = "kappa_matrix",
mds_k = 2,
mds_labels = 5,
mds_colorby = "z_score",
gs_labels = NULL,
plot_title = NULL)
mds
ggsave(paste0("GO/lu/lu_mds_", verson_num, ".png"), width = 8, height = 4.6, dpi = 600)
gs_dendro(res_enrich,
n_gs = 30,
gs_dist_type = "kappa",
clust_method = "ward.D2",
color_leaves_by = "z_score",
size_leaves_by = "gs_pvalue",
color_branches_by = "clusters",
create_plot = TRUE)
ggs <- ggs_graph(res_enrich,
res_de = res_object,
anno_df,
n_gs = 30)
ggs
scores_mat <- gs_scores(
se = vst_macrophage,
res_de = res_object,
res_enrich = res_enrich,
annotation_obj = anno_df
)
gs_scoresheat(scores_mat,n_gs = 30)
#geneset_heatmap1 <- gs_heatmap(se = vst_macrophage,
#           res_de = res_object,
#           res_enrich = res_enrich,
#           annotation_obj = anno_df,
#           geneset_id = "GO:0097746",
#           cluster_columns = TRUE,
#           anno_col_info = c("sex", "trt")
#)
#geneset_heatmap1
#geneset_volcano <- signature_volcano(res_de = lu_res_trt,
#                  res_enrich = res_enrich,
#                  annotation_obj = anno_df,
#                  geneset_id = "GO:0048514",
#                  FDR = 0.05,
#                  color = "#1a81c2"
#)
#ggsave("GO/lu_geneset_volcano.png", width = 8, height = 4.6, dpi = 600)
#geneset_volcano
}
lu_countdata <- dplyr::select(countdata, contains("lu"))
lu_samples <-samples %>% filter(tissue == "lu")
lu_samples$trt <- as.factor(lu_samples$trt)
lu_samples$sex <- as.factor(lu_samples$sex)
lu_dds_trt <- DESeqDataSetFromMatrix(countData = lu_countdata,
colData = lu_samples,
design = ~ trt + sex)
#filter out genes where there are less than 8 samples with normalized counts greater than or equal to 10.
lu_dds_trt <- estimateSizeFactors(lu_dds_trt)
idx <- rowSums(counts(lu_dds_trt, normalized=TRUE) >= 10 ) >= 8
lu_dds_trt <- lu_dds_trt[idx,]
print(paste("Number of genes after filtering by total expression:", nrow(lu_dds_trt)))
matrix <- as.data.frame(counts(lu_dds_trt))
#lu_dds_trt$trt_combo <- factor(paste0(lu_dds_trt$trt, lu_dds_trt$sex))
#design(lu_dds_trt) <- ~ pro_weight + trt_combo
lu_dds_trt <- DESeq(lu_dds_trt,test="Wald")
#res but with ensid name
lu_res_trt <- results(lu_dds_trt, alpha = 0.05)
lu_res_trt$symbol <- mcols(lu_res_trt)$symbol
# how many are "significant"?
table(lu_res_trt[,"padj"] < 0.05)
SigGeneWrapper(lu_res_trt, 0.05, "all")
summary(lu_res_trt)
#BiocManager::install("vsn")
#library("vsn")
vsd <- varianceStabilizingTransformation(lu_dds_trt, blind = FALSE)
meanSdPlot(assay(vsd))
pcaData <- plotPCA(vsd, intgroup = c("trt", "sex"), returnData = TRUE)
# get percent variation
percentVar <- round(100 * attr(pcaData, "percentVar"))
# pca code
pca <- ggplot(pcaData, aes(x = PC1, y = PC2, color = trt, shape = sex, name=name)) +
stat_ellipse(aes(group = trt, linetype = trt), type = "t", level = 0.95, size = 1.25, show.legend = FALSE) +
#scale_linetype_manual(values=c("twodash", "longdash", "solid"), guide = FALSE) +
geom_point(size = 3, show.legend = TRUE) +
#scale_color_manual(values = c("orange1", "red1", "yellow2", "chartreuse4")) +
#scale_shape_manual(values = c(8,9,15,16,10,17,18,11,13)) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() + theme_bw() +
guides(shape = guide_legend(order = 1),color = guide_legend(order = 2))
ggplotly(pca)
ggsave("figures/lu_PCA.png", width = 8, height = 4.6, dpi = 600)
# crea sample distances and sample distance matrix
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix( sampleDists )
heatmapcolors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix, clusr_rows = FALSE, clusr_cols = FALSE, col = heatmapcolors)
#BiocManager::install("fastmatrix")
#BiocManager::install("pcaExplorer")
library(pcaExplorer)
annos$ensembl <-as.character(annos$ensid)
#rename transcript rows to ensid names
rownames(lu_dds_trt)=annos$ensid[match(names(lu_dds_trt),annos$gene)]
#remove the NAs (those transcripts dont have a ensid name)
lu_dds_trt <- lu_dds_trt[complete.cases(rownames(lu_dds_trt)), ]
lu_dds_trt <- lu_dds_trt[!rownames(lu_dds_trt) == "NULL", ]
lu_dds_trt <- estimateSizeFactors(lu_dds_trt)
normalized_counts <- counts(lu_dds_trt, normalized=TRUE)
#NOTE: DESeq2 doesnâ€™t actually use normalized counts, rather it uses the raw counts and models the normalization inside the Generalized Linear Model (GLM). These normalized counts will be useful for downstream visualization of results, but cannot be used as input to DESeq2 or any other tools that peform differential expression analysis which use the negative binomial model.
ddssex <- DESeqDataSetFromMatrix(countData = lu_countdata,
colData = lu_samples,
design = ~ trt + sex)
#filter out genes where there are less than 8 samples with normalized counts greater than or equal to 10.
ddssex <- estimateSizeFactors(ddssex)
idx <- rowSums(counts(ddssex, normalized=TRUE) >= 10 ) >= 8
ddssex <- ddssex[idx,]
print(paste("Number of genes after filtering by total expression:", nrow(ddssex)))
matrix <- as.data.frame(counts(ddssex))
ddssex <- DESeq(ddssex, test="Wald")
ressex <- results(ddssex, alpha = 0.05, contrast = c("sex", "M", "F"))
ressex$transcript <- mcols(ressex)$transcript
lu_res_trt$symbol <- mcols(lu_res_trt)$symbol
# how many are "significant"?
table(ressex[,"padj"] < 0.05)
summary(ressex)
SigGeneWrapper(ressex, 0.05, "sex")
ddstrt <- DESeqDataSetFromMatrix(countData = lu_countdata,
colData = lu_samples,
design = ~ trt + sex)
#filter out genes where there are less than 8 samples with normalized counts greater than or equal to 10.
ddstrt <- estimateSizeFactors(ddstrt)
idx <- rowSums(counts(ddstrt, normalized=TRUE) >= 10 ) >= 8
ddstrt <- ddstrt[idx,]
print(paste("Number of genes after filtering by total expression:", nrow(ddstrt)))
matrix <- as.data.frame(counts(ddstrt))
ddstrt <- DESeq(ddstrt, test="Wald")
#rename transcript rows to ensid names
rownames(ddstrt)=annos$ensid[match(names(ddstrt),annos$gene)]
#remove the NAs (those transcripts dont have a ensid name)
ddstrt <- ddstrt[complete.cases(rownames(ddstrt)), ]
ddstrt <- ddstrt[!rownames(ddstrt) == "NULL", ]
ddstrt <- estimateSizeFactors(ddstrt)
normalized_counts <- counts(ddstrt, normalized=TRUE)
restrt <- results(ddstrt, alpha = 0.01, contrast = c("trt", "yes", "no"))
restrt$transcript <- mcols(restrt)$transcript
restrt$symbol <- mcols(restrt)$symbol
# how many are "significant"?
table(restrt[,"padj"] < 0.01)
summary(restrt)
SigGeneWrapper(restrt, 0.01, "trt")
restrt_lu <-restrt
restrt <- gene_ton_fun(restrt,0,ensembl)
write.csv(restrt, file="results/GOresults/lu/lu_de_GO.csv")
#gene_ton_fig(restrt,0,ensembl)
anno_df <- data.frame(gene_id = restrt$ensembl, gene_name = restrt$hgnc_symbol)
vst_macrophage <- varianceStabilizingTransformation(lu_dds_trt)
bg_ids <- rownames(lu_dds_trt)[rowSums(counts(lu_dds_trt)) > 0]
bg_symbols <- mapIds(org.Hs.eg.db,
keys = bg_ids,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# res_enrich object
#library("AnnotationDbi")
de_symbols_IFNg_vs_naive <- deseqresult2df(restrt, FDR =0.05)$hgnc_symbol
# res_enrich object ------------------------------------------------------------
topgoDE_macrophage_IFNg_vs_naive <-
pcaExplorer::topGOtable(de_symbols_IFNg_vs_naive,
bg_symbols,
ontology = "BP",
mapping = "org.Hs.eg.db",
geneID = "symbol",
topTablerows = 30)
res_enrich <- shake_topGOtableResult(topgoDE_macrophage_IFNg_vs_naive)
res_enrich_lu <- get_aggrscores(res_enrich = res_enrich,
res_de = restrt,
annotation_obj = anno_df,
aggrfun = mean)
#GeneTonic(dds = lu_dds_trt,
#          res_de = restrt,
#          res_enrich = res_enrich_lu,
#          annotation_obj = anno_df,
#          project_id = "myFirstGeneTonic")
gene_list <- c("ENSG00000165272","ENSG00000004939","ENSG00000179639","ENSG00000183878","ENSG00000121853","ENSG00000146678","ENSG00000125965","ENSG00000124440","ENSG00000130649")
plist <- c()
for (i in gene_list) {
plist[[i]] <- gene_plot(lu_dds_trt,
gene = c(i),
intgroup = "trt",
assay = "counts",
annotation_obj = anno_df,
plot_type = "boxplot",
labels_display = F)
}
lu_DE_plots <- gridExtra::grid.arrange(grobs = plist, ncol=1)
ggsave("figures/lu/lu_DE_plots.png", plot = lu_DE_plots, width = 8, height = 20, dpi = 600)
gene_list <- c("ENSG00000165272","ENSG00000004939","ENSG00000179639","ENSG00000121853","ENSG00000146678","ENSG00000125965","ENSG00000124440","ENSG00000130649")
plist <- c()
for (i in gene_list) {
plist[[i]] <- gene_plot(lu_dds_trt,
gene = c(i),
intgroup = "trt",
assay = "counts",
annotation_obj = anno_df,
plot_type = "boxplot",
labels_display = F)
}
lu_DE_plots <- gridExtra::grid.arrange(grobs = plist, ncol=1)
lu_DE_plots <- gridExtra::grid.arrange(grobs = plist, ncol=1)
ggsave("figures/lu/lu_DE_plots.png", plot = lu_DE_plots, width = 8, height = 20, dpi = 600)
ggsave("figures/lu/lu_DE_plots.png", plot = lu_DE_plots, width = 8, height = 20)
ggsave("figures/liv/liv_DE_plots.png", plot = liv_DE_plots, width = 8, height = 20)
ggsave("figures/hyp/hyp_DE_plots.png", plot = hyp_DE_plots, width = 8, height = 20)
ggsave("figures/gi/gi_DE_plots.png", plot = gi_DE_plots, width = 8, height = 20)
ggsave("figures/kid/kid_DE_plots.png", plot = kid_DE_plots, width = 8, height = 20)
#BiocManager::install("impute")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggbeeswarm)
library(lme4)
library(lmerTest)
#library(edgeR)
library(WGCNA)
library(cluster)
library(flashClust)
library(devtools)
library(Biobase)
library(preprocessCore)
library(gprofiler2)
library(doParallel)
library(readr)
setwd("/Users/danielleblumstein/Documents/UNH/rnaseq/dehy_final")
countdata<-read.table(file = "data/gene.level.count.data.tsv", header = TRUE)
samples<- read_csv("results/samplespreadsheet.csv")
annos <- read_csv("/Users/danielleblumstein/Documents/UNH/rnaseq/dehy_final/data/annos.txt")
annos$ensid =  mapIds(org.Hs.eg.db,
keys=annos$gene,
column="ENSEMBL",
keytype="SYMBOL",
multiVals="first")
kid_countdata <- dplyr::select(countdata, contains("kid"))
kid_samples <-samples %>% filter(tissue == "kid")
kid_samples$trt <- as.factor(kid_samples$trt)
kid_samples$sex <- as.factor(kid_samples$sex)
kid_dds_trt <- DESeqDataSetFromMatrix(countData = kid_countdata,
colData = kid_samples,
design = ~ trt + sex)
#filter out genes where there are less than 8 samples with normalized counts greater than or equal to 10.
kid_dds_trt <- estimateSizeFactors(kid_dds_trt)
idx <- rowSums(counts(kid_dds_trt, normalized=TRUE) >= 10 ) >= 8
kid_dds_trt <- kid_dds_trt[idx,]
print(paste("Number of genes after filtering by total expression:", nrow(kid_dds_trt)))
matrix <- as.data.frame(counts(kid_dds_trt))
#kid_dds_trt$trt_combo <- factor(paste0(kid_dds_trt$trt, kid_dds_trt$sex))
#design(kid_dds_trt) <- ~ pro_weight + trt_combo
kid_dds_trt <- DESeq(kid_dds_trt,test="Wald")
annos$ensembl <- as.character(annos$ensid)
#rename transcript rows to ensid names
rownames(kid_dds_trt)=annos$ensid[match(names(kid_dds_trt),annos$gene)]
#remove the NAs (those transcripts dont have a ensid name)
kid_dds_trt <- kid_dds_trt[complete.cases(rownames(kid_dds_trt)), ]
kid_dds_trt <- kid_dds_trt[!rownames(kid_dds_trt) == "NULL", ]
kid_dds_trt <- estimateSizeFactors(kid_dds_trt)
normalized_counts <- vst(kid_dds_trt, blind = FALSE)
kid_Expr <- assay(normalized_counts)
##################  WGCNA  ##########################
#code to subset just DE genes
#kid_master <- read.csv("results/DE_kid/trt_genes.csv", header = TRUE)
#kidref <- kid_master$Gene
#kid_Expr <- subset(normalized_counts, subset = rownames(normalized_counts) %in% kidref)
datExpr <- kid_Expr
#Remove gene information and transpose the expression data
rownames(kid_Expr)<-NULL
kid_Expr <- t(kid_Expr)
##########check included genes#########
gsg = goodSamplesGenes(kid_Expr, verbose = 3);
gsg$allOK
# Trait data generation ---------------------------------------------------
# Now we read in the phenotypic trait data
kid_samples <- as.data.frame(kid_samples)
dim(kid_samples)
traitData_kid <- 'row.names<-'(kid_samples, kid_samples$sample)
traitData_kid$trt <- as.numeric(as.factor(traitData_kid$trt))
traitData_kid$sex <- as.numeric(as.factor(traitData_kid$sex))
# Choose columns of trait dataset to be used in downstream analyses
colnames(traitData_kid)
traitData_kid <- traitData_kid %>% dplyr::select(c('sex','total_weight_delta',"pro_weight","Na","BUN","AnGap","K","Crea","Hct","Cl","Glu","Hb*","TCO2","iCa","trt","mean_RQ","mean_EE","mean_H2Og","body_temp_3"))
#traitData_kid <- 'row.names<-'(traitData_kid, traitData_kid$sample)
traitData_kid <- as.data.frame(lapply(traitData_kid, as.numeric))
#### filter samples ########
A_kid=adjacency(t(kid_Expr),type="distance")
# this calculates the whole network connectivity
k_kid=as.numeric(apply(A_kid,2,sum))-1
# standardized connectivity
Z.k_kid=scale(k_kid)
# Designate samples as outlying
# if their Z.k value is below the threshold
thresholdZ.k=-4 # often -2.5
# the color vector indicates outlyingness (red)
outlierColor_kid <- ifelse(Z.k_kid<thresholdZ.k,"red","black")
# calculate the cluster tree using flashClust or hclust
sampleTree_kid <- flashClust(as.dist(1-A_kid), method = "average")
# Convert traits to a color representation:
# where red indicates high values
traitColors = data.frame(numbers2colors(traitData_kid,signed=FALSE))
dimnames(traitColors)[[2]] = paste(names(traitData_kid))
datColors = data.frame(outlier = outlierColor_kid,traitColors)
plotDendroAndColors(sampleTree_kid,groupLabels=names(datColors),
colors=datColors,main="Sample Dendrogram and Trait Heatmap")
############ Choosing the soft threshold beta via scale free topology
# Choose a set of soft thresholding powers
powers=c(1:30) # in practice this should include powers up to 20.
# choose power based on sft_JZ criterion
sft_kid=pickSoftThreshold(kid_Expr,powerVector=powers, networkType = "signed")
# Plot the results:
par(mfrow=c(1,2))
# sft_kid index as a function of different powers
plot(sft_kid$fitIndices[,1],-sign(sft_kid$fitIndices[,3])*sft_kid$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="sft_kid, unsigned R^2",type="n",main=paste("Scale independence"))
text(sft_kid$fitIndices[,1],-sign(sft_kid$fitIndices[,3])*sft_kid$fitIndices[,2],
labels=powers,col="red", pch=1, cex=.50)
# this line corresponds to using an R^2 cut-off of h
abline(h=0.85,col="red")
# Mean connectivity as a function of different powers
plot(sft_kid$fitIndices[,1],sft_kid$fitIndices[,5],type="n",
xlab="Soft Threshold (power)",ylab="Mean Connectivity",main=paste("Mean connectivity"))
text(sft_kid$fitIndices[,1],sft_kid$fitIndices[,5],labels=powers,col="red", cex=.50)
##########I'm choosing 15 for my power based on scale independence and k for kid ###########
###########Automatic module detection via dynamic cutting
mergingThresh = 0.25
net_kid = blockwiseModules(kid_Expr,corType="pearson",
maxBlockSize=14000,networkType="signed hybrid",power=21,minModuleSize=20,
mergeCutHeight=mergingThresh,numericLabels=TRUE,saveTOMs=TRUE,
pamRespectsDendro=FALSE,saveTOMFileBase="kid_TEST")
moduleLabelsAutomatic_kid=net_kid$colors
# Convert labels to colors for plotting
moduleColorsAutomatic_kid = labels2colors(moduleLabelsAutomatic_kid)
# A data frame with module eigengenes can be obtained as follows
MEsAutomatic_kid=net_kid$MEs
load("kid_TEST-block.1.RData")
#softPower = 21 #Chosen in the graphs before
#adjacency = adjacency(kid_Expr, power = softPower, type = "unsigned") #Calculating the adjacency matrix
#TOM = TOMsimilarity(adjacency, TOMType="unsigned")
adj <- TOM
adj[adj > 0.1] = 1
adj[adj != 1] = 0
#visIgraph
network <- graph.adjacency(adj)
data <- toVisNetworkData(network)
detach("package:igraph", unload = TRUE)
library(igraph)
install.packages("visNetwork")
data <- toVisNetworkData(network)
library(visNetwork)
data <- toVisNetworkData(network)
data
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px")
load("~/Documents/UNH/rnaseq/dehy_final/Untitled.RData")
version
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/website/DaniBlumstein.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/website/DaniBlumstein.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/website/DaniBlumstein.github.io")
#render your sweet site.
rmarkdown::render_site()
temp_test2 <- read.csv("~/Documents/UNH/metabolic chamber/dehydration/temp_test2.csv")
temp_test2 <- temp_test2 |>
mutate(tt = fct_cross(water, sex))
library(devtools)
library(tidyverse)
library(lubridate)
library(readr)
library(viridis)
library(patchwork)
library(tidyselect)
library(readxl)
library(broom)
library(cowplot)
library(DescTools)
library(ggpubr)
library(dplyr)
library(ggforce)
library(reshape2)
#install.packages("NatParksPalettes")
library(NatParksPalettes)
temp_test2 <- read.csv("~/Documents/UNH/metabolic chamber/dehydration/temp_test2.csv")
temp_test2 <- temp_test2 |>
mutate(tt = fct_cross(water, sex))
all_combo<-unique(temp_test2$tt)
temp_test2$hour <- as.numeric(temp_test2$hour)
temp_test2$water <- as.factor(temp_test2$water)
temp_test2$temp <- as.numeric(temp_test2$temp)
body_temp2 <- ggline(temp_test2, x = "hour", y = "temp", add = "mean_se",color = "water", facet.by = c("time","sex"))+
stat_compare_means(aes(group = water), label = "p.format",hide.ns = TRUE,label.y = 39)+
scale_color_manual(values=cols, name = "Treatments") +
expand_limits(y=c(NA, 40))+
labs(y = "mean body temperature (deg C)")+
facet_grid(time~sex, margins = "time")
body_temp2
body_temp2 <- ggline(temp_test2, x = "hour", y = "temp", add = "mean_se",color = "water", facet.by = c("time","sex"))+
stat_compare_means(aes(group = water), label = "p.format",hide.ns = TRUE,label.y = 39)+
#scale_color_manual(values=cols, name = "Treatments") +
expand_limits(y=c(NA, 40))+
labs(y = "mean body temperature (deg C)")+
facet_grid(time~sex, margins = "time")
body_temp2
mean_delta_weight <- ggline(dehydration_data, x = "hour", y = "delta_weight", add = "mean_se",color = "water", facet.by = "sex")+
stat_compare_means(aes(group = H2O), label = "p.signif",hide.ns = TRUE,label.y = .34)+
scale_color_manual(values=cols, name = "Treatments") +
labs(y = bquote("mean delta weight g day"^-1))
devtools::install_github("kassambara/ggpubr")
cols <- c("yes"="#0C62AF","no"="#822B0F")
dehydration_data$water<-as.factor(dehydration_data$H2O)
dehydration_data <- read.csv("~/Documents/UNH/metabolic chamber/dehydration/dehydration_data.csv")
dehydration_data
electrolyte_data <- read_excel("/Users/danielleblumstein/Documents/UNH/metabolic chamber/dehydration/mouse_metadata.xlsx")
electrolyte_data
