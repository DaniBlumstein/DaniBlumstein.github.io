theme(legend.position = "none", plot.title = element_text(face = "bold",hjust = 0.5),axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
xlab("")+
ggtitle("osmolality")+
ylab("mmol/L")
#save("osmolality", 13,10, plist_electro[["osmolality"]])
electo_plots <- gridExtra::grid.arrange(grobs = plist_electro, nrow=2, ncol=4)
ggsave("electo_plots.png", width = 10,height=10, plot=electo_plots)
# Chunk 4
setwd("~/Documents/UNH/metabolic chamber/diet")
weight_ID("26-Feb-20")
cages26feb <- merge_data(bring_in_data("feb26.csv", "M"))
cages26feb$experiment <- "cages26feb"
#DLS shift
cages26feb$DateTime <-as.POSIXct(cages26feb$DateTime)
cages26feb$StartTime <-as.POSIXct(cages26feb$StartTime)
cages26feb$StartTime <- cages26feb$StartTime+ 1*60*60
cages26feb$DateTime <- cages26feb$DateTime+ 1*60*60
dates <- unique(cages26feb$StartDate)
cages26feb$day <- match(cages26feb$StartDate, dates)
ggplot(cages26feb, aes(as.POSIXct(with(cages26feb, StartTime)),y=EE_kJH))+
geom_point()+
scale_x_datetime(date_breaks = "3 hours", date_labels = "%H:%M")
unique(cages26feb$Animal_ID)
# Chunk 5
weight_ID("5-Mar-20")
cages10mar <- merge_data(bring_in_data("mar10.csv", "M"))
cages10mar$experiment <- "cages10mar"
dates <- unique(cages10mar$StartDate)
cages10mar$day <- match(cages10mar$StartDate, dates)
ggplot(cages10mar, aes(as.POSIXct(with(cages10mar, StartTime)),y=H2Omg))+
geom_point()+
scale_x_datetime(date_breaks = "3 hours", date_labels = "%H:%M")
unique(cages10mar$Animal_ID)
# Chunk 6
weight_ID("20-Feb-20")
cages20feb <- merge_data(bring_in_data("feb20.csv", "F"))
cages20feb$experiment <- "cages20feb"
cages20feb$DateTime <-as.POSIXct(cages20feb$DateTime)
cages20feb$StartTime <-as.POSIXct(cages20feb$StartTime)
cages20feb$StartTime <- cages20feb$StartTime+ 1*60*60
cages20feb$DateTime <- cages20feb$StartTime+ 1*60*60
dates <- unique(cages20feb$StartDate)
cages20feb$day <- match(cages20feb$StartDate, dates)
ggplot(cages20feb, aes(as.POSIXct(with(cages20feb, StartTime)),y=H2Omg))+
geom_point()+
scale_x_datetime(date_breaks = "3 hours", date_labels = "%H:%M")
unique(cages20feb$Animal_ID)
# Chunk 7
weight_ID("14-Mar-20")
cages14mar <- merge_data(bring_in_data("mar14.csv", "F"))
cages14mar$experiment <- "cages14mar"
dates <- unique(cages14mar$StartDate)
cages14mar$day <- match(cages14mar$StartDate, dates)
ggplot(cages14mar, aes(as.POSIXct(with(cages14mar, StartDate + hms(StartTime))),y=Deg_C))+
geom_line()
unique(cages14mar$Animal_ID)
# Chunk 8
weight_ID("13-Aug-20")
cages13aug7 <- bring_in_data("13Aug20_7.csv", "F")
cages13aug <- merge_data(rbind(cages13aug7))
cages13aug$experiment <- "cages13aug"
dates <- unique(cages13aug$StartDate)
cages13aug$day <- match(cages13aug$StartDate, dates)
ggplot(cages13aug, aes(as.POSIXct(with(cages13aug, StartDate + hms(StartTime))),y=H2Omg))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_point()
unique(cages13aug$Animal_ID)
# Chunk 9
weight_ID("21-Aug-20")
cages21aug1 <- bring_in_data("21Aug20.csv", "M")
cages21aug <- merge_data(rbind(cages21aug1))
cages21aug$experiment <- "cages21aug"
dates <- unique(cages21aug$StartDate)
cages21aug$day <- match(cages21aug$StartDate, dates)
ggplot(cages21aug, aes(as.POSIXct(with(cages21aug, StartDate + hms(StartTime))),y=H2Omg))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_point()
unique(cages21aug$Animal_ID)
# Chunk 10
weight_ID("25-Aug-20")
cages25aug1 <- bring_in_data("14Sep20.csv", "M")
cages25aug <- merge_data(rbind(cages25aug1))
cages25aug$experiment <- "cages25aug"
dates <- unique(cages25aug$StartDate)
cages25aug$day <- match(cages25aug$StartDate, dates)
ggplot(cages25aug, aes(as.POSIXct(with(cages25aug, StartDate + hms(StartTime))),y=Deg_C))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_line()
unique(cages25aug$Animal_ID)
# Chunk 11
weight_ID("18-Sep-20")
cages18sep1 <- bring_in_data("18Sep20.csv", "F")
cages18sep <- merge_data(rbind(cages18sep1))
cages18sep$experiment <- "cages18sep"
dates <- unique(cages18sep$StartDate)
cages18sep$day <- match(cages18sep$StartDate, dates)
ggplot(cages18sep, aes(as.POSIXct(with(cages18sep, StartDate + hms(StartTime))),y=Deg_C))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_line()
unique(cages18sep$Animal_ID)
# Chunk 12
# Establish when each interval/transition starts and stops in seconds
#Daytime interval: hrs:8:00-21:00
daytime_interval <- period_to_seconds(hms("09:00:00")):period_to_seconds(hms("20:00:00"))
#Night time: hrs 22:00-5:00 (do NOT do a 22:5 sequence as it will count backwards from 22 to 5...)
nighttime_interval <- c((period_to_seconds(hms("21:00:01")):period_to_seconds(hms("24:59:59"))), #evening portion of 'nighttime'
(period_to_seconds(hms("00:00:00")):period_to_seconds(hms("06:00:00")))) #morning portion of 'nightitme'
#Morning transition (t1): 6:00-9:00
t1_interval <- period_to_seconds(hms("06:00:00")):period_to_seconds(hms("09:00:00"))
#Evening transition (t2): 20-21:00
t2_interval <- period_to_seconds(hms("20:00:00")):period_to_seconds(hms("21:00:00"))
# Chunk 13
baseline <- rbind(cages26feb, cages10mar, cages20feb, cages14mar)
baseline$experiment <- "Standard"
baseline$FQ <- 0.8907387
baseline$seconds <- as.numeric(baseline$StartTime)
baseline <- baseline %>% add_column(TimeOfDay = NA)
baseline$TimeOfDay[baseline$seconds %in% nighttime_interval == "TRUE"] <- "night"
baseline$TimeOfDay[baseline$seconds %in% daytime_interval == "TRUE"] <- "day"
baseline$TimeOfDay[baseline$seconds %in% t1_interval == "TRUE"] <- "t1"
baseline$TimeOfDay[baseline$seconds %in% t2_interval == "TRUE"] <- "t2"
modified <- rbind(cages13aug,cages21aug,cages25aug,cages18sep)
modified$experiment <- "Low Fat"
modified$FQ <- 0.92266
modified$seconds <- as.numeric(modified$StartTime)
modified <- modified %>% add_column(TimeOfDay = NA)
modified$TimeOfDay[modified$seconds %in% nighttime_interval == "TRUE"] <- "night"
modified$TimeOfDay[modified$seconds %in% daytime_interval == "TRUE"] <- "day"
modified$TimeOfDay[modified$seconds %in% t1_interval == "TRUE"] <- "t1"
modified$TimeOfDay[modified$seconds %in% t2_interval == "TRUE"] <- "t2"
# Chunk 14
all_animals <- rbind(modified, baseline)
#remove empty cage
target <- c(0,1,2,3,4,5,6)
cages <- all_animals %>% filter(animal %in% target)
write.csv(cages, "cages", row.names=FALSE)
#note: H2Omg is mg h20 min-1
#H2Og is g h2o h -1
cages$H2Og <- cages$H2Omg * 0.06
cages$EE_kJH <- cages$EE_kJH / 1000
# Chunk 15
analysis_data <- cages[,c("Sex","EE_kJH","H2Og", "RQ", "StartTime","Animal_ID", "VO2", "VCO2", "Deg_C", "weight", "experiment", "SD_VCO2", "SD_VO2", "StartDate", "SD_H2Omg", "FQ", "experiment", "TimeOfDay", "seconds","day")]
#split the time up by hour to make it an easier vairable to work with
analysis_data_edited <- data.frame(do.call('rbind', strsplit(as.character(analysis_data$StartTime),':',fixed=TRUE)))
#add it back to the subseted data for analysis
analysis_data_inter <- cbind(analysis_data,analysis_data_edited)
analysis_data_final <- analysis_data_inter[,c("Sex","EE_kJH","H2Og", "RQ","Animal_ID", "Deg_C", "weight", "experiment", "X1", "StartTime", "SD_VCO2", "SD_VO2", "SD_H2Omg", "VO2", "VCO2", "StartDate", "FQ", "experiment", "TimeOfDay","seconds","day")]
analysis_data_final$Sex <- as.factor(analysis_data_final$Sex)
analysis_data_final$hour <- analysis_data_final$X1
analysis_data_final$X1 <- NULL
analysis_data_final$Deg_C <- as.double(analysis_data_final$Deg_C)
analysis_data_final$Animal_ID <- as.numeric(analysis_data_final$Animal_ID)
analysis_data_final$experiment <- as.factor(analysis_data_final$experiment)
names(analysis_data_final)[3] <- "H2Og"
analysis_data_final$hour <- as.numeric(analysis_data_final$hour)
unique(analysis_data_final$Animal_ID)
write_csv(analysis_data_final, "diet_analysis_data.csv")
# Chunk 16
metric1 <- "RQ"
measurement_one <- analysis_data_final %>%  dplyr::select(all_of(metric1))
df<-as.data.frame(measurement_one[[metric1]])
legend_title <- "Animal ID"
RQ <- ggplot(data = analysis_data_final,aes(colour=factor(experiment),x=as.POSIXct(StartTime),y=measurement_one[[metric1]]))+
annotate("rect", xmin = as.POSIXct("1970-01-01 00:00:01", tz="UTC"),
xmax = as.POSIXct("1970-01-01 06:00:00", tz="UTC"),
ymin = -Inf, ymax = Inf, fill="grey84") +
annotate("rect", xmin = as.POSIXct("1970-01-01 21:00:00", tz="UTC"),
xmax = as.POSIXct("1970-01-01 23:59:59", tz="UTC"),
ymin = -Inf, ymax = Inf, fill="grey84") +
geom_point(aes(group=as.factor(experiment), color=as.factor(experiment)), size = 1,alpha=0.2,show.legend = FALSE)+
theme_classic(base_size = 20)+
theme(legend.position = "none")+
geom_smooth(data=df$V1, method='gam',se = FALSE, size=1.5,show.legend = FALSE)+
labs(x = "", y = metric1)+
scale_color_manual(legend_title, values=c("#0571B0", "grey31", "blue"))+
scale_x_datetime(date_breaks = "4 hours", date_labels = "%H:%M")+
ylim(0.5, 2)+
guides(alpha=FALSE)+
facet_grid(cols = vars(Sex))
metric2 <- "EE_kJH"
measurement_two <- analysis_data_final %>%  dplyr::select(all_of(metric2))
df<-as.data.frame(measurement_two[[metric2]])
legend_title <- "Animal ID"
EE_kJH <- ggplot(data = analysis_data_final,aes(colour=factor(experiment),x=as.POSIXct(StartTime),y=measurement_two[[metric2]]))+
annotate("rect", xmin = as.POSIXct("1970-01-01 00:00:01", tz="UTC"),
xmax = as.POSIXct("1970-01-01 06:00:00", tz="UTC"),
ymin = -Inf, ymax = Inf, fill="grey84") +
annotate("rect", xmin = as.POSIXct("1970-01-01 21:00:00", tz="UTC"),
xmax = as.POSIXct("1970-01-01 23:59:59", tz="UTC"),
ymin = -Inf, ymax = Inf, fill="grey84") +
geom_point(aes(group=as.factor(experiment), color=as.factor(experiment)), size = 1,alpha=0.2,show.legend = FALSE)+
theme_classic(base_size = 20,)+
theme(axis.text.x = element_blank(),legend.position = "none")+
geom_smooth(data=df$V1, method='gam',se = FALSE, size=1.5,show.legend = FALSE)+
labs(x = "", y = bquote("EE kJ h"^-1))+
scale_color_manual(legend_title, values=c("#0571B0", "grey31", "blue"))+
scale_x_datetime(date_breaks = "4 hours", date_labels = "%H:%M")+
#ylim(0.5, 2)+
guides(alpha=FALSE)+
facet_grid(cols = vars(Sex))
metric3 <- "H2Og"
measurement_three <- cages %>%  dplyr::select(all_of(metric3))
df<-as.data.frame(measurement_three[[metric3]])
legend_title <- "Animal ID"
h2o <- ggplot(data = analysis_data_final,aes(colour=factor(experiment),x=as.POSIXct(StartTime),y=measurement_three[[metric3]]))+
annotate("rect", xmin = as.POSIXct("1970-01-01 00:00:01", tz="UTC"),
xmax = as.POSIXct("1970-01-01 06:00:00", tz="UTC"),
ymin = -Inf, ymax = Inf, fill="grey84") +
annotate("rect", xmin = as.POSIXct("1970-01-01 21:00:00", tz="UTC"),
xmax = as.POSIXct("1970-01-01 23:59:59", tz="UTC"),
ymin = -Inf, ymax = Inf, fill="grey84") +
geom_point(aes(group=as.factor(experiment), color=as.factor(experiment)), size = 1,alpha=0.2,show.legend = FALSE)+
theme_classic(base_size = 20)+
theme(axis.text.x = element_blank(),legend.position = "none")+
geom_smooth(data=df$V1, method='gam',se = FALSE, size=1.5,show.legend = FALSE)+
labs(x = "", y = bquote("WLR g h"^-1))+
scale_color_manual(legend_title, values=c("#0571B0", "grey31", "blue"))+
scale_x_datetime(date_breaks = "4 hours", date_labels = "%H:%M")+
#ylim(0.5, 2)+
guides(alpha=FALSE)+
facet_grid(cols = vars(Sex))
EE_kJH/h2o/RQ
ggsave("phys_plots.png", width = 11,height=13, plot=EE_kJH/h2o/RQ)
# Chunk 17
data <- read_csv("diet_analysis_data.csv",
col_types = cols(Sex = col_character(),
EE_kJH = col_double(),
H2Og = col_double(),
RQ = col_double(),
Animal_ID = col_character(),
Deg_C = col_double(),
weight = col_double(),
experiment = col_character(),
StartTime = col_character(), #col_time(format = "%H:%M:%S"), - changed for easy use of lubridate
SD_VCO2 = col_double(),
SD_VO2 = col_double(),
SD_H2Omg = col_double(),
VO2 = col_double(),
VCO2 = col_double(),
StartDate = col_date(format = "%Y-%m-%d"),
hour = col_integer()))
all_M = data[data$Sex == 'M', ]
all_F = data[data$Sex == 'F', ]
# Chunk 18
count = 1
dependent_variables = c("EE_kJH", "RQ", "VO2", "VCO2", "H2Og")
varname_list = c("EE_kJH_OLs","RQ_OLs","VO2_OLs","VCO2_OLs","H2O_OLs")
for (DV in dependent_variables){
print(DV)
model <- lm(as.formula(paste0(DV, " ~ weight + experiment")), data = all_M)
model.metrics <- augment(model) %>% select(-.hat, -.sigma, -.fitted)
summ <- model.metrics %>% filter(abs(.std.resid) > 3) %>% as.data.frame()
OL_list = c()
masterlist = c()
for (each_outlier_row in 1:nrow(summ)){
this_weight <- summ[each_outlier_row, "weight"]
this_DV  <- summ[each_outlier_row, DV]
OL_list <- c(OL_list, (which(all_M$weight == this_weight & all_M[DV] == this_DV)))
}
print(OL_list)
#Assign list of outliers to specified variable lists (OL_list_EE_kJH, RQ, VO2, VCO2, mgH2O)
assign(paste("OL_list_", DV, sep = ""), OL_list)
}
masterlist <- c(OL_list_EE_kJH, OL_list_RQ, OL_list_VO2, OL_list_VCO2, OL_list_H2Og)
masterlist_noDup <- unique(masterlist)
all_noOL_M <- all_M[-c(masterlist_noDup),]
dim(all_M) #6470
dim(all_noOL_M) #6255
write.csv(all_noOL_M, "all_noOL_M.csv", row.names = FALSE)
# Chunk 19
count = 1
dependent_variables = c("EE_kJH", "RQ", "VO2", "VCO2", "H2Og")
varname_list = c("EE_kJH_OLs","RQ_OLs","VO2_OLs","VCO2_OLs","H2O_OLs")
for (DV in dependent_variables){
print(DV)
model <- lm(as.formula(paste0(DV, " ~ weight + experiment")), data = all_F)
model.metrics <- augment(model) %>% select(-.hat, -.sigma, -.fitted)
summ <- model.metrics %>% filter(abs(.std.resid) > 3) %>% as.data.frame()
OL_list = c()
masterlist = c()
for (each_outlier_row in 1:nrow(summ)){
this_weight <- summ[each_outlier_row, "weight"]
this_DV  <- summ[each_outlier_row, DV]
OL_list <- c(OL_list, (which(all_F$weight == this_weight & all_F[DV] == this_DV)))
}
print(OL_list)
assign(paste("OL_list_", DV, sep = ""), OL_list)
}
masterlist <- c(OL_list_EE_kJH, OL_list_RQ, OL_list_VO2, OL_list_VCO2, OL_list_H2Og)
masterlist_noDup <- unique(masterlist)
all_noOL_F <- all_F[-c(masterlist_noDup),]
write.csv(all_noOL_F, "all_noOL_F.csv", row.names=FALSE)
all_noOL <- rbind(all_noOL_M,all_noOL_F)
dim(all_noOL_M[which(all_noOL_M$TimeOfDay == "night"| all_noOL_M$experiment == "Standard") , ])
dim(all_noOL_M[which(all_noOL_M$TimeOfDay == "day"| all_noOL_M$experiment == "Standard") , ])
dim(all_noOL_M[which(all_noOL_M$TimeOfDay == "t1"| all_noOL_M$experiment == "Standard") , ])
dim(all_noOL_M[which(all_noOL_M$TimeOfDay == "t2"| all_noOL_M$experiment == "Standard") , ])
# Chunk 20
LF_F <- all_noOL[which(all_noOL$Sex =="F"| all_noOL$experiment == "Low Fat") , ]
print(aggregate(LF_F$EE_kJH, list(LF_F$TimeOfDay), FUN=mean))
print(aggregate(LF_F$RQ, list(LF_F$TimeOfDay), FUN=mean))
print(aggregate(LF_F$H2Og, list(LF_F$TimeOfDay), FUN=mean))
SD_F <- all_noOL[which(all_noOL$Sex =="F"| all_noOL$experiment == "Standard") , ]
print(aggregate(SD_F$EE_kJH, list(SD_F$TimeOfDay), FUN=mean))
print(aggregate(SD_F$RQ, list(SD_F$TimeOfDay), FUN=mean))
print(aggregate(SD_F$H2Og, list(SD_F$TimeOfDay), FUN=mean))
LF_M <- all_noOL[which(all_noOL$Sex =="M"| all_noOL$experiment == "Low Fat") , ]
print(aggregate(LF_M$EE_kJH, list(LF_M$TimeOfDay), FUN=mean))
print(aggregate(LF_M$RQ, list(LF_M$TimeOfDay), FUN=mean))
print(aggregate(LF_M$H2Og, list(LF_M$TimeOfDay), FUN=mean))
SD_M <- all_noOL[which(all_noOL$Sex =="M"| all_noOL$experiment == "Standard") , ]
print(aggregate(SD_M$EE_kJH, list(SD_M$TimeOfDay), FUN=mean))
print(aggregate(SD_M$RQ, list(SD_M$TimeOfDay), FUN=mean))
print(aggregate(SD_M$H2Og, list(SD_M$TimeOfDay), FUN=mean))
# Chunk 21
subset_all_noOL <- all_noOL[,c("Sex","Animal_ID", "weight", "experiment","TimeOfDay")]
total_H2Og<- setNames(aggregate(all_noOL$H2Og, list(all_noOL$Animal_ID), FUN=sum),c("Animal_ID", "total_H2Og"))
stuff <- all_noOL %>% group_by(day,hour, Animal_ID) %>% summarise(H2Og = mean(H2Og))
sum_H2Og<- setNames(aggregate(stuff$H2Og, list(stuff$Animal_ID), FUN=sum),c("Animal_ID", "total_H2Og"))
sum_H2Og<- distinct(merge(sum_H2Og, subset_all_noOL, by = "Animal_ID"))
total_EE_kJH<- setNames(aggregate(all_noOL$EE_kJH, list(all_noOL$Animal_ID), FUN=sum),c("Animal_ID", "total_EE_kJH"))
stuff <- all_noOL %>% group_by(day,hour, Animal_ID) %>% summarise(EE_kJH = mean(EE_kJH))
sum_EE_kJH<- setNames(aggregate(stuff$EE_kJH, list(stuff$Animal_ID), FUN=sum),c("Animal_ID", "total_EE_kJH"))
sum_EE_kJH<- distinct(merge(sum_EE_kJH, subset_all_noOL, by = "Animal_ID"))
total_RQ<- setNames(aggregate(all_noOL$RQ, list(all_noOL$Animal_ID), FUN=sum),c("Animal_ID", "total_RQ"))
stuff <- all_noOL %>% group_by(day,hour, Animal_ID) %>% summarise(RQ = mean(RQ))
sum_RQ<- setNames(aggregate(stuff$RQ, list(stuff$Animal_ID), FUN=sum),c("Animal_ID", "total_RQ"))
sum_RQ<- distinct(merge(sum_RQ, subset_all_noOL, by = "Animal_ID"))
# 2.  Perform ANOVA with X as Response
anovaX_mod<-lm(weight ~ experiment+Sex*TimeOfDay, sum_H2Og)
anova(anovaX_mod)
# 3.  Perform ANOVA with total_H2Og as Response
anovatotal_H2Og_mod<-lm(total_H2Og ~ experiment + Sex*TimeOfDay, sum_H2Og)
anova(anovatotal_H2Og_mod)
summary(anovatotal_H2Og_mod)
# 4.  Test for homogeneity of slopes
slopes_mod<-lm(total_H2Og ~ experiment +Sex*TimeOfDay + weight + experiment:weight, sum_H2Og)
anova(slopes_mod)
# 5.  The ANCOVA
#library(car)
ancova_mod<-lm(total_H2Og ~ experiment + Sex*TimeOfDay + weight, sum_H2Og)
Anova(ancova_mod, type = 2)
# 6.  Find beta and Xmean; then create Z
summary(ancova_mod)
mean(sum_H2Og$weight)
sum_H2Og$Z<-sum_H2Og$total_H2Og + 0.1120*(sum_H2Og$weight - 21.7375)
library(emmeans)
# INTERLUDE:  Comparing means and analyses
#library(emmeans)
lima_lsm <- emmeans(ancova_mod, "Sex")
adj_means <- aggregate(sum_H2Og$Z, list(sum_H2Og$Sex), mean)
anovaZ_mod<-lm(Z ~ experiment + Sex*TimeOfDay, sum_H2Og)
anova(anovaZ_mod)
# 7.  Normality of residuals
anovaZ_mod<-lm(Z ~ experiment + Sex*TimeOfDay, sum_H2Og)
sum_H2Og$anovaZ_resids <- residuals(anovaZ_mod)
shapiro.test(sum_H2Og$anovaZ_resids)
# 8.  Homogeneity of variances
#library(car)
leveneTest(Z ~ Sex, data = sum_H2Og)
# 9.  Additivity of main effects
sum_H2Og$anovaZ_preds <- predict(anovaZ_mod)
sum_H2Og$sq_anovaZ_preds <- sum_H2Og$anovaZ_preds^2
tuketotal_H2OgZ_mod<-lm(Z ~ experiment + Sex + sq_anovaZ_preds, sum_H2Og)
anova(tuketotal_H2OgZ_mod)
# 10.  The ANCOVA, with desired subsequent analysis
ancova_mod<-lm(total_RQ ~ experiment* TimeOfDay+ Sex+ weight, sum_RQ)
Anova(ancova_mod, ttotal_H2Ogpe = 2)
#Tukey separation of adjusted Sex means
lima_lsm <- emmeans(ancova_mod, c("experiment","TimeOfDay"))
contrast(lima_lsm, method = "pairwise", adjust = "tukey")
emmip(ancova_mod, experiment~TimeOfDay, CIs=TRUE)
emmip(ancova_mod, TimeOfDay~experiment, CIs=TRUE)
citation("emmeans")
# Chunk 22
#library(mgcv)
#library(timeDate)
## Enable repository from gavinsimpson
#options(repos = c(
#  gavinsimpson = "https://gavinsimpson.r-universe.dev",
#  CRAN = "https://cloud.r-project.org"))
#
## Download and install gratia in R
#install.packages("gratia")
#library(gratia)
library(timeDate)
#subset_thing$time_in_S <- as.numeric(subset_thing$StartTime)
all_noOL$doy <- dayOfYear(as.timeDate(all_noOL$StartDate))
all_noOL$ctime <- all_noOL$doy + all_noOL$seconds / (24*60*60)
summary(all_noOL$ctime)
## make time in day (values between 0 and 1) ; scale may be better for gam
all_noOL$time_in_D <- all_noOL$seconds /(24 * 60 * 60)
summary(all_noOL$time_in_D)
all_noOL$startexp <- 0  # initializing
ind <- unique(all_noOL$Animal_ID)
for (i in 1:length(ind) ){  # i = 1
startEXP <- min(all_noOL$doy[all_noOL$Animal_ID == ind[i] ],na.rm=T)
all_noOL$startexp[all_noOL$Animal_ID == ind[i] ] <- startEXP
}
table(all_noOL$startexp)
# create "time in experiment"  in units of day
all_noOL$ctime.exp <- all_noOL$ctime - all_noOL$startexp
all_noOL$Sex <- as.factor(all_noOL$Sex)
all_noOL <- all_noOL |>
mutate(tt = fct_cross(experiment, Sex))
# Chunk 23
library(mgcv)
all_noOL$Sex <- as.factor(all_noOL$Sex)
all_noOL$experiment <- as.factor(all_noOL$experiment)
M2 <- gam(H2Og ~ Sex * experiment + s(ctime.exp,k=3)+ s(time_in_D, by = tt, bs="cc")+ s(EE_kJH) + s(RQ), data = all_noOL,random = list(startexp = ~1, Animal_ID = ~1|startexp),method = "REML", familly = Gamma(link = "log"))
summary(M2)
draw(M2, residuals = TRUE, scales = "fixed")
M3 <- gamm(log(EE_kJH) ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc") + s(H2Og) + s(RQ), data = dd,random = list(startexp = ~1, Animal_ID = ~1|startexp))
M3 <- gamm(log(EE_kJH) ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc") + s(H2Og) + s(RQ), data = all_noOL,random = list(startexp = ~1, Animal_ID = ~1|startexp))
summary(M3$gam)
extract_ranef(M3)
sum_H2Og
# 10.  The ANCOVA, with desired subsequent analysis
ancova_mod<-lm(total_H2Og ~ experiment* TimeOfDay+ Sex+ weight, sum_H2Og)
Anova(ancova_mod, type = 2)
sum_H2Og
coef(M3)
coefs <-coef(M3)
coefs
coefs <-coef(M3$gam)
coefs
extract_ranef(M3$gam)
coef(M3$gam)
M3 <- gamm(log(EE_kJH) ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc"), data = all_noOL,random = list(startexp = ~1, Animal_ID = ~1|startexp))
summary(M3$gam)
M4 <- gamm(log(RQ) ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc"), data = dd, random = list(startexp = ~1, Animal_ID = ~1|startexp))
M4 <- gamm(log(RQ) ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc"), data = all_noOL, random = list(startexp = ~1, Animal_ID = ~1|startexp))
summary(M4$gam)
M2 <- gamm(H2Og ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc"), data = all_noOL,random = list(startexp = ~1, Animal_ID = ~1|startexp))
summary(M2$gam)
all_noOL_M[which(all_noOL_M$TimeOfDay == "night"| all_noOL_M$experiment == "Standard") , ]
all_noOL_M[which(all_noOL_M$TimeOfDay == "t2"| all_noOL_M$experiment == "Standard") , ]
test <- all_noOL_M[which(all_noOL_M$TimeOfDay == "t2"| all_noOL_M$experiment == "Standard") , ]
test
View(test)
test <- all_noOL_M[which(all_noOL_M$TimeOfDay == "t2"| all_noOL_M$experiment == "Standard") , ]
View(test)
test <- all_noOL_M[which(all_noOL_M$TimeOfDay == "t2") , ]
View(test)
M2 <- gamm(H2Og ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc") + s(log(EE_kJH)) + s(RQ), data = all_noOL,random = list(startexp = ~1, Animal_ID = ~1|startexp))
summary(M2$lme)
summary(M2$lme)
M3 <- gamm(log(EE_kJH) ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc") + s(H2Og) + s(RQ), data = all_noOL,random = list(startexp = ~1, Animal_ID = ~1|startexp))
summary(M3$lme)
M4 <- gamm(log(RQ) ~ experiment+Sex + s(ctime.exp,k=3) + s(time_in_D, bs="cc") + s(H2Og) + s(log(EE_kJH)), data = all_noOL, random = list(startexp = ~1, Animal_ID = ~1|startexp))
summary(M4$lme)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/DaniBlumstein.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/DaniBlumstein.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/website/DaniBlumstein.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/website/DaniBlumstein.github.io/")
#render your sweet site.
rmarkdown::render_site()
library(rsconnect)
remove.packages("rsconnect")
install.packages("rsconnect")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/website/DaniBlumstein.github.io/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/Documents/website/DaniBlumstein.github.io/")
#render your sweet site.
rmarkdown::render_site()
devtools::install_github("rstudio/rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='104wj0-dani0blumstein',
token='AC72BFC5DD07BF3A53E1A9D62E0321F6',
secret='OO2SE3WHgkeY+DQ0St7GBYdNWjpP9PZoOaLH+1kd')
library(colorspace)
install_version("colorspace", version = "1.4.1", repos = "http://cran.us.r-project.org")
detach(colorspace)
detach("package:colorspace", unload = TRUE)
detach("package:colorspace", unload = TRUE)
uninstall("colorspace")
install.versions('colorspace', '1.4.1')
install_version('colorspace', '1.4.1')
library(remotes)
remove.packages("remotes")
install.packages("remotes")
