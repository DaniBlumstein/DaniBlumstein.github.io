# cages7may9 <- bring_in_data("7May20/7_may_2020_9.csv", "M")
#
# weight_ID("7-May-20")
# cages7may10 <- bring_in_data("7May20/7_may_2020_10.csv", "M")
#
# weight_ID("7-May-20")
# cages7may11 <- bring_in_data("7May20/7_may_2020_11.csv", "M")
#
# cages7may_all <- rbind(cages7may1, cages7may2, cages7may3, cages7may4, cages7may5, cages7may6, cages7may7, cages7may8, cages7may9, cages7may10, cages7may11)
#
# cages7may <- merge_data(rbind(cages7may9, cages7may10, cages7may11))
#
# ggplot(cages7may_all, aes(as.POSIXct(with(cages7may_all, StartDate + hms(StartTime))),y=Deg_C))+
#   geom_line()
weight_ID("18-May-20")
cages18may1 <- bring_in_data("hot/18May20/18_may_20_1.csv", "M")
weight_ID("18-May-20")
cages18may2 <- bring_in_data("hot/18May20/18_may_20_2.csv", "M")
weight_ID("18-May-20")
cages18may3 <- bring_in_data("hot/18May20/18_may_20_3.csv", "M")
weight_ID("18-May-20")
cages18may4 <- bring_in_data("hot/18May20/18_may_20_4.csv", "M")
cages18may_all <- rbind(cages18may1, cages18may2, cages18may3, cages18may4)
cages18may <- merge_data(rbind(cages18may2, cages18may3, cages18may4))
ggplot(cages18may, aes(as.POSIXct(with(cages18may, StartDate + hms(StartTime))),y=Deg_C))+
geom_line()
# weight_ID("22-May-20")
# cages22may1 <- bring_in_data("22May20/22_may_20_1.csv", "M")
#
# weight_ID("22-May-20")
# cages22may2 <- bring_in_data("22May20/22_may_20_2.csv", "M")
#
# weight_ID("22-May-20")
# cages22may3 <- bring_in_data("22May20/22_may_20_2.csv", "M")
#
# cages22may <- merge_data(rbind(cages22may1, cages22may2, cages22may3))
#
# ggplot(cages22may, aes(as.POSIXct(with(cages22may, StartDate + hms(StartTime))),y=Deg_C))+
#   geom_line()
weight_ID("25-May-20")
cages25may1 <- bring_in_data("hot/25May20/25_may_20_1.csv", "F")
weight_ID("25-May-20")
cages25may2 <- bring_in_data("hot/25May20/25_may_20_2.csv", "F")
weight_ID("25-May-20")
cages25may3 <- bring_in_data("hot/25May20/25_may_20_3.csv", "F")
weight_ID("25-May-20")
cages25may4 <- bring_in_data("hot/25May20/25_may_20_4.csv", "F")
cages25may <- merge_data(rbind(cages25may1, cages25may2, cages25may3, cages25may4))
ggplot(cages25may, aes(as.POSIXct(with(cages25may, StartDate + hms(StartTime))),y=Deg_C))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_line()
weight_ID("29-May-20")
cages29may1 <- bring_in_data("hot/29May20/29_may_20_1.csv", "F")
weight_ID("29-May-20")
cages29may2 <- bring_in_data("hot/29May20/29_may_20_2.csv", "F")
weight_ID("29-May-20")
cages29may3 <- bring_in_data("hot/29May20/29_may_20_3.csv", "F")
cages29may <- merge_data(rbind(cages29may1, cages29may2, cages29may3))
ggplot(cages29may, aes(as.POSIXct(with(cages29may, StartDate + hms(StartTime))),y=Deg_C))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_line()
weight_ID("2-Jun-20")
cages3june1 <- bring_in_data("hot/3June20/3_june_20_1.csv", "M")
weight_ID("2-Jun-20")
cages3june2 <- bring_in_data("hot/3June20/3_june_20_2.csv", "M")
weight_ID("2-Jun-20")
cages3june3 <- bring_in_data("hot/3June20/3_june_20_3.csv", "M")
weight_ID("2-Jun-20")
cages3june4 <- bring_in_data("hot/3June20/3_june_20_4.csv", "M")
cages3june <- merge_data(rbind(cages3june1, cages3june2, cages3june3, cages3june4))
ggplot(cages3june, aes(as.POSIXct(with(cages3june, StartDate + hms(StartTime))),y=Deg_C))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_line()
weight_ID("7-Jun-20")
cages7june1 <- bring_in_data("cold/7June20/7_june_20_1.csv", "M")
weight_ID("7-Jun-20")
cages7june2 <- bring_in_data("cold/7June20/7_june_20_2.csv", "M")
weight_ID("7-Jun-20")
cages7june3 <- bring_in_data("cold/7June20/7_june_20_3.csv", "M")
weight_ID("7-Jun-20")
cages7june4 <- bring_in_data("cold/7June20/7_june_20_4.csv", "M")
cages7june <- merge_data(rbind(cages7june2, cages7june3, cages7june4))
ggplot(data = cages7june, aes(x = as.POSIXct(with(cages7june, StartDate + hms(StartTime))),y=Deg_C))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_line()
# Establish when each interval/transition starts and stops in seconds
#Daytime interval: hrs:8:00-21:00
daytime_interval <- period_to_seconds(hms("09:00:00")):period_to_seconds(hms("20:00:00"))
#Night time: hrs 22:00-5:00 (do NOT do a 22:5 sequence as it will count backwards from 22 to 5...)
nighttime_interval <- c((period_to_seconds(hms("21:00:01")):period_to_seconds(hms("24:59:59"))), #evening portion of 'nighttime'
(period_to_seconds(hms("00:00:00")):period_to_seconds(hms("06:00:00")))) #morning portion of 'nightitme'
baseline <- rbind(cages26feb, cages10mar, cages20feb, cages14mar)
baseline$experiment <- "baseline"
baseline$FQ <- 0.8907387
baseline$seconds <- as.numeric(baseline$StartTime)
#baseline$TimeOfDay <- ifelse(baseline$seconds %in% nighttime_interval, "night", "day")
target <- c(0,1,2,3,4,5,6)
baseline <- baseline %>% filter(animal %in% target)
cold <- rbind(cages20april, cages27april, cages30april, cages7june)
cold$experiment <- "cold"
cold$FQ <- 0.8907387
cold$seconds <- as.numeric(cold$StartTime)
#cold$TimeOfDay <- ifelse(cold$seconds %in% nighttime_interval, "night", "day")
target <- c(0,1,2,3,4,5,6)
cold <- cold %>% filter(animal %in% target)
hot <- rbind(cages18may, cages25may, cages29may, cages3june)
hot$experiment <- "hot"
hot$FQ <- 0.8907387
hot$seconds <- as.numeric(hot$StartTime)
#hot$TimeOfDay <- ifelse(hot$seconds %in% nighttime_interval, "night", "day")
target <- c(0,1,2,3,4,5,6)
hot <- hot %>% filter(animal %in% target)
dehydration <- cages16april
dehydration$experiment <- "dehydration"
dehydration$FQ <- 0.8907387
target <- c(0,1,2,3,4,5,6)
dehydration <- dehydration %>% filter(animal %in% target)
all_animals <- rbind(hot, cold, baseline)
length(all_animals)
#remove empty cage
target <- c(0,1,2,3,4,5,6)
cages <- all_animals %>% filter(animal %in% target)
write_csv(cages, "~/Box Sync/Cactus_Mouse_Physiology/data/5015_lowfat/cages.csv")
legend_title <- "Animal ID"
ggplot(cages, aes(Deg_C, EE, color = experiment)) +
geom_point()
#scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
#scale_colour_viridis_d(legend_title, option = "C") +
#ylim()
analysis_data <- cages[,c("Sex","EE","H2Omg", "RQ", "StartTime","Animal_ID", "VO2", "VCO2", "Deg_C", "weight", "experiment", "SD_VCO2", "SD_VO2", "StartDate", "SD_H2Omg", "FQ")]
#split the time up by hour to make it an easier vairable to work with
analysis_data_edited <- data.frame(do.call('rbind', strsplit(as.character(analysis_data$StartTime),':',fixed=TRUE)))
#add it back to the subseted data for analysis
analysis_data_inter <- cbind(analysis_data,analysis_data_edited)
analysis_data_final <- analysis_data_inter[,c("Sex","EE","H2Omg", "RQ","Animal_ID", "Deg_C", "weight", "experiment", "X1", "StartTime", "SD_VCO2", "SD_VO2", "SD_H2Omg", "VO2", "VCO2", "StartDate", "FQ")]
analysis_data_final$Sex <- as.factor(analysis_data_final$Sex)
analysis_data_final$hour <- analysis_data_final$X1
analysis_data_final$X1 <- NULL
analysis_data_final$Deg_C <- as.double(analysis_data_final$Deg_C)
analysis_data_final$Animal_ID <- as.numeric(analysis_data_final$Animal_ID)
analysis_data_final$experiment <- as.factor(analysis_data_final$experiment)
names(analysis_data_final)[3] <- "H2Omg"
unique(analysis_data_final$Animal_ID)
write_csv(analysis_data_final, path = "/Users/danielleblumstein/Desktop/analysis_data_final.csv")
metric0 <- "Deg_C"
target <- 7
#the "cages20april" is what you will need to change to look at whatever temperature you are interest in
cagetemp <- cages14mar %>% filter(animal %in% target)
cagetemp <- tail(cagetemp, n=320)
measurement_zero <- cagetemp %>%  dplyr::select(all_of(metric0))
df<-as.data.frame(measurement_zero[[metric0]])
temp_baseline <- ggplot(data = cagetemp,aes(x=as.POSIXct(StartTime),y=measurement_zero[[metric0]])) +
geom_line(aes(), size = 2) +
#theme(axis.text.x = element_blank(), axis.text.y=element_text(size=12), legend.position = "none") +
labs(x = "", y = metric0) +
scale_colour_viridis_d(legend_title, option = "C") +
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
metric1 <- "RQ"
measurement_one <- cages %>%  dplyr::select(all_of(metric1))
df<-as.data.frame(measurement_one[[metric1]])
legend_title <- "Animal ID"
RQ <- ggplot(data = cages,aes(color=factor(experiment),x=as.POSIXct(StartTime),y=measurement_one[[metric1]]))+
geom_point(aes(alpha=0.2, group=as.factor(experiment), color=as.factor(experiment)), size = 1)+
theme(axis.text.x = element_blank(), axis.text.y=element_text(size=12))+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99)+
labs(x = "", y = metric1)+
scale_color_manual(legend_title, values=c("#050505", "#FF3338", "blue"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")+
geom_hline(yintercept = 0.8907387, color='orange', size=1)+
ylim(0.5, 2)+
guides(alpha=FALSE)
metric2 <- "EE"
measurement_two <- cages %>%  dplyr::select(all_of(metric2))
df<-as.data.frame(measurement_two[[metric2]])
legend_title <- "Animal ID"
EE <- ggplot(data = cages,aes(colour=factor(experiment),x=as.POSIXct(StartTime),y=measurement_two[[metric2]]))+
geom_point(aes(alpha=0.2,group=as.factor(experiment), color=as.factor(experiment)), size = 1,)+
theme(axis.text.x = element_blank(), axis.text.y=element_text(size=12), legend.position = "none")+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99)+
labs(x = "", y = metric2)+
scale_color_manual(values=c("#050505", "#FF3338", "blue"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
metric3 <- "H2Omg"
measurement_three <- cages %>%  dplyr::select(all_of(metric3))
df<-as.data.frame(measurement_three[[metric3]])
legend_title <- "Animal ID"
h2o <- ggplot(data = cages,aes(colour=factor(experiment),x=as.POSIXct(StartTime),y=measurement_three[[metric3]]))+
geom_point(aes(alpha=0.2,group=as.factor(experiment), color=as.factor(experiment)), size = 1)+
theme(axis.text.y=element_text(size=12), legend.position = "none", axis.text.x=element_text(size=12))+
geom_smooth(data=df$V1, method='loess', span=.1, level=0.99)+
labs(x = "", y = metric3)+
scale_color_manual(values=c("#050505", "#FF3338", "blue"))+
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")
RQ/EE/h2o
unique(analysis_data_final$hour)
p1 <- ggplot(analysis_data_final, aes(RQ, EE, color = Sex)) +
geom_point()
#p2 <- ggplot(analysis_data_final, aes(H2Omg, EE, color = hour , shape=Sex)) +
#geom_point() +
#scale_color_viridis(direction = -1) +
#scale_colour_gradient2(low = "blue", mid = "red", high = "blue", midpoint = 12)
#theme_minimal()
p3 <- ggplot(analysis_data_final, aes(RQ, H2Omg, color =Sex)) +
geom_point()
p4 <- ggplot(analysis_data_final, aes(RQ, Deg_C, color =Sex)) +
geom_point()
p5 <- ggplot(analysis_data_final, aes(EE, Deg_C, color =Sex)) +
geom_point()
p6 <- ggplot(analysis_data_final, aes(H2Omg, Deg_C, color =Sex)) +
geom_point()
p7 <- ggplot(all_animals, aes(weight, EE, color = Sex)) +
geom_point()
#plot weight line for males and for females with a regression (male and female mean)
p1/p3/p4/p5/p6/p7
night <- with(analysis_data_inter ,analysis_data_inter[ hour( StartTime ) >= 0 & hour( StartTime ) < 6 , ] )
day <- with(analysis_data_inter ,analysis_data_inter[ hour( StartTime ) >= 13 & hour( StartTime ) < 19 , ] )
animalweight <- night %>% group_by(Animal_ID) %>% summarise(weight = mean(weight))  %>% dplyr::select(weight)
# this is the code to change - when changing the thing you want to plot.
#meanVCO2 <- day %>% group_by(Animal_ID) %>% summarise(VCO2 = mean(VO2)) %>% dplyr::select(VCO2)
df = iris
#install.packages("car")
library(car)
leveneTest(EE~experiment,cages)
fit = aov(EE~experiment,cages)
summary(fit)
#install.packages("psych")
library(psych)
describeBy(cages$EE, cages$experiment)
library(ggplot2)
VO2_box <- ggplot(analysis_data_final,aes(y=VO2, x=hour, fill=experiment))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "")
EE_box <- ggplot(analysis_data_final,aes(y=EE, x=hour, fill=experiment))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "")
H2O_box <- ggplot(analysis_data_final,aes(y=H2Omg, x=hour, fill=experiment))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "")
RQ_box <- ggplot(analysis_data_final,aes(y=RQ, x=hour, fill=experiment))+
stat_summary(fun="mean", geom="bar",position="dodge")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "Hour")
VO2_box/EE_box/H2O_box/RQ_box
ggplot(analysis_data_final,aes(y=VO2, x=hour, color=experiment))+
stat_summary(fun.y="mean", geom="point")+
stat_summary(fun.y="mean", geom="line")+
stat_summary(fun.data = mean_se, geom = "errorbar", position="dodge",width=.8)+
labs(x = "Hour")
fit2=aov(EE~experiment+weight,cages)
Anova(fit2, type="III")
library(reshape)
library(reshape2)
library(tidyverse)
library(viridis)
library(data.table)
library(gridExtra)
library(grid)
save <- function(name, fig_len, fig_width,plot_name)
{
library(Cairo)
Cairo::Cairo(
fig_len, #length
fig_width, #width
file = paste(name, ".png", sep = ""),
type = "png", #tiff
bg = "transparent", #white or transparent depending on your requirement
dpi = 300,
units = "cm" #you can change to pixels etc
)
plot(plot_name) #p is your graph object
dev.off()
}
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$StartTime, y=i, color=as.factor(cages_baseline$days_old))) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")
weight_ID <- function(date)
{
subset <- electrolyte_data[which(electrolyte_data$experiment_date == date), names(electrolyte_data) %in% c("sex", "mouse_ID", "cage_number", "weight","weight2","weight3","end_weight", "Na", "K", "Cl", "TCO2", "BUN", "Crea", "Glu", "iCa", "AnGap", "Hct", "Hb*", "dob")]
ids <- subset$mouse_ID
#currently have to change each week manually becuase fuck it I can't figure out how to add a damn argument
weights <- as.double(subset$end_weight)
dob <- subset$dob
x = 0
for (i in 1:length(ids))
{
assign(paste("animalID", x, sep = ""), ids[i], envir = parent.frame())
assign(paste("cageweight", x, sep = ""), weights[i], envir = parent.frame())
assign(paste("dob", x, sep = ""), dob[i], envir = parent.frame())
x = x + 1
}
}
path <- "~/Box Sync/Cactus_Mouse_Physiology/data/"
electrolyte_data <- read_excel(paste(path,"electrolyte_data.xlsx",sep=""), na = "NA")
#week1
weight_ID("27-Jan-21")
cages27jan1 <- bring_in_data("immature/27Jan21/week1.csv", "U")
#week2
weight_ID("27-Jan-21")
cages27jan2 <- bring_in_data("immature/27Jan21/week2.csv", "U")
#week3
weight_ID("27-Jan-21")
cages27jan3 <- bring_in_data("immature/27Jan21/week3.csv", "U")
#week4
weight_ID("27-Jan-21")
cages27jan4 <- bring_in_data("immature/27Jan21/week2.csv", "U")
cages21jan <- rbind(cages27jan1,cages27jan2,cages27jan3,cages27jan4)
cages21jan$dob <- as.Date(cages21jan$dob)
dates <- select(cages21jan, StartDate, dob)
days_old_list <- c()
for(i in 1:nrow(dates))
{
row <- dates[i,]
dob <- row[[2]]
start <- strptime(row[[1]], format="%Y-%m-%d", tz="UTC")
days_old <- as.numeric(difftime(as.POSIXct(start), as.POSIXct(dob, tz="UTC"), units="days"))
days_old_list <- c(days_old_list, days_old)
}
cages21jan$days_old <- days_old_list
cages21jan$rep <- 1
#week1
weight_ID("1-Mar-21")
cages1mar1 <- bring_in_data("immature/1Mar21/1Mar21_week1.csv", "U")
#week2
weight_ID("1-Mar-21")
cages1mar2 <- bring_in_data("immature/1Mar21/1Mar21_week2.csv", "U")
#week3
weight_ID("1-Mar-21")
cages1mar3 <- bring_in_data("immature/1Mar21/1Mar21_week3.csv", "U")
#week4
#weight_ID("1-Mar-21")
#cages1mar4 <- bring_in_data("immature/1Mar21/week2.csv", "U")
cages1mar <- rbind(cages1mar1,cages1mar2,cages1mar3)
cages1mar$dob <- as.Date(cages1mar$dob)
dates <- select(cages1mar, StartDate, dob)
days_old_list <- c()
for(i in 1:nrow(dates))
{
row <- dates[i,]
dob <- row[[2]]
start <- strptime(row[[1]], format="%Y-%m-%d", tz="UTC")
days_old <- as.numeric(difftime(as.POSIXct(start), as.POSIXct(dob, tz="UTC"), units="days"))
days_old_list <- c(days_old_list, days_old)
}
cages1mar$days_old <- days_old_list
cages1mar$rep <- 2
#week1
weight_ID("1-Mar-21")
cages1mar1 <- bring_in_data("immature/1Mar21/1Mar21_week1.csv", "U")
#week2
weight_ID("1-Mar-21")
cages1mar2 <- bring_in_data("immature/1Mar21/1Mar21_week2.csv", "U")
#week3
weight_ID("1-Mar-21")
cages1mar3 <- bring_in_data("immature/1Mar21/1Mar21_week3.csv", "U")
cages1mar <- rbind(cages1mar1,cages1mar2,cages1mar3)
cages1mar$dob <- as.Date(cages1mar$dob)
dates <- select(cages1mar, StartDate, dob)
days_old_list <- c()
for(i in 1:nrow(dates))
{
row <- dates[i,]
dob <- row[[2]]
start <- strptime(row[[1]], format="%Y-%m-%d", tz="UTC")
days_old <- as.numeric(difftime(as.POSIXct(start), as.POSIXct(dob, tz="UTC"), units="days"))
days_old_list <- c(days_old_list, days_old)
}
cages1mar$days_old <- days_old_list
cages1mar$rep <- 2
imm_data <- rbind(cages21jan, cages1mar)
unique(imm_data$days_old)
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$StartTime, y=i, color=as.factor(cages_baseline$days_old))) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")
cages_baseline <- imm_data[,c("Sex","EE","H2Omg", "RQ", "Deg_C", "weight", "StartTime", "rep", "StartDate", "days_old")]
col_names <- colnames(cages_baseline)
col_names <- col_names[2:4]
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$StartTime, y=i, color=as.factor(cages_baseline$days_old))) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")
#scale_color_manual(legend_title, values=c("#FF5A00", "#00B3BD", "#FF5A00"))
plot
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$StartTime, y=i, color=as.factor(cages_baseline$days_old))) +
#plot <- ggplot(cages_baseline, aes(x=days_old,y = i), color=as.factor(cages_baseline$Sex)) +
#xlab(paste(days_old, hms(cages_baseline$StartTime))) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
ylim(0.5, 2)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")
plot
cages_baseline <- imm_data[,c("Sex","EE","H2Omg", "RQ", "Deg_C", "weight", "StartTime", "rep", "StartDate", "days_old")]
col_names <- colnames(cages_baseline)
col_names <- col_names[2:4]
plot_list <- list()
for (i in col_names){
if (i=="RQ")
{
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$StartTime, y=i, color=as.factor(cages_baseline$days_old))) +
#plot <- ggplot(cages_baseline, aes(x=days_old,y = i), color=as.factor(cages_baseline$Sex)) +
#xlab(paste(days_old, hms(cages_baseline$StartTime))) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
ylim(0.5, 2)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")+
#scale_color_manual(legend_title, values=c("#FF5A00", "#00B3BD", "#FF5A00"))+
#geom_hline(aes(yintercept=FQ))+
#geom_point(aes(y=cages_temps$Deg_C))+
facet_grid(~rep)
plot_list[[i]] <- plot
}
else
{
plot <- ggplot(cages_baseline, aes_string(as.POSIXct(with(cages_baseline, StartDate + hms(StartTime))), y=i, color=as.factor(cages_baseline$Sex))) +
#plot <- ggplot(cages_baseline, aes(x=days_old,y = i), color=as.factor(cages_baseline$Sex)) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")+
scale_color_manual(legend_title, values=c("#FF5A00", "#00B3BD", "#FF5A00"))+
facet_grid(~rep)
plot_list[[i]] <- plot
}
}
plot_grob <- arrangeGrob(grobs=plot_list)
grid.arrange(plot_grob)
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$StartTime, y=i, color=as.factor(cages_baseline$days_old))) +
#plot <- ggplot(cages_baseline, aes(x=days_old,y = i), color=as.factor(cages_baseline$Sex)) +
#xlab(paste(days_old, hms(cages_baseline$StartTime))) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
ylim(0.5, 2)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")
plot
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$days_old, y=i, color=as.factor(cages_baseline$days_old))) +
#plot <- ggplot(cages_baseline, aes(x=days_old,y = i), color=as.factor(cages_baseline$Sex)) +
#xlab(paste(days_old, hms(cages_baseline$StartTime))) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
ylim(0.5, 2)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")
plot
cages_baseline <- imm_data[,c("Sex","EE","H2Omg", "RQ", "Deg_C", "weight", "StartTime", "rep", "StartDate", "days_old")]
col_names <- colnames(cages_baseline)
col_names <- col_names[2:4]
plot_list <- list()
for (i in col_names){
if (i=="RQ")
{
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$days_old, y=i, color=as.factor(cages_baseline$days_old))) +
#plot <- ggplot(cages_baseline, aes(x=days_old,y = i), color=as.factor(cages_baseline$Sex)) +
#xlab(paste(days_old, hms(cages_baseline$StartTime))) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
ylim(0.5, 2)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")+
#scale_color_manual(legend_title, values=c("#FF5A00", "#00B3BD", "#FF5A00"))+
#geom_hline(aes(yintercept=FQ))+
#geom_point(aes(y=cages_temps$Deg_C))+
facet_grid(~rep)
plot_list[[i]] <- plot
}
else
{
plot <- ggplot(cages_baseline, aes_string(x=cages_baseline$days_old, y=i, color=as.factor(cages_baseline$days_old))) +
#plot <- ggplot(cages_baseline, aes(x=days_old,y = i), color=as.factor(cages_baseline$Sex)) +
geom_point(aes(alpha=0.05))+
guides(alpha=FALSE)+
geom_smooth(data=df$V1, method='loess', span=.4, level=0.99, size=1.0, color = "white")+
#scale_color_manual(legend_title, values=c("#FF5A00", "#00B3BD", "#FF5A00"))+
facet_grid(~rep)
plot_list[[i]] <- plot
}
}
plot_grob <- arrangeGrob(grobs=plot_list)
grid.arrange(plot_grob)
df
df
df <- read.csv("MyData.csv")
setwd("~/Documents/DaniBlumstein.github.io/App-1")
df <- read.csv("MyData.csv")
df
sub
sub <- subset(df, subset = Sex %in% input$treatments)
sub <- subset(df, subset = Sex %in% df$EE)
sub
sub <- subset(df, subset = "F" %in% df$EE)
sub
df
subset
sub <- subset(df, Sex == "M")
sub
df
unique(df$Sex)
subset(df, df$Sex == "M", select=c(VO2, VCO2, H2Omg, EE, RQ,StartTime))
sex_list <- unique(df$Sex)
experiment_list <- unique(df$experiment)
time_list <- unique(df$TimeOfDay)
sex_list
experiment_list
time_list
col_names <- names(df)
col_names
df
filteredData
selectedData()
filteredData
selectedData
df
